Use sample of ranked league of legends matches to calculate the win probability added for every major objective

Be able to filter through gamestates, calculating the win probability added for different senarios (For example: allied team is leading by x amount of gold, enemy team has 2 dragons, etc.)
^^^ Confidence testing to see if the win probability added deviates significantly from 0

Have a method of updating the calculated win probability added, considering updates can change the game (Bayes' rule?)


Steps:
1. Calculate the win probability before the objective is taken and subtract the end-game state from the win probability. Average across all games.
    - Each gamestate will be its own row(there will be many different rows of the same match)
    - Identify when objective is taken ---> measure gamestate at proceeding minute ---> take into account events that happen between preceeding measurement and objective capture
    
    Feature list: (* = static, # = nonfeature)
        - GameID#
        - TeamID#
        - CCScore*
        - EnemyCCScore*
        - IsSquishy*
        - VsSquishy*
        - damageTypeRatio
        - Kill Difference
        - Gold Difference (estimated as measured + kill gold)
        - VisionScoreDiff
        - AverageAllyLvl
        - AverageEnemyLvl
        - Average distance from fountain last few mintues
        - DragonsTaken
        - EnemyDragonsTaken
        - GrubDiff
        - EnemyTop(Mid)(Bot)TurretsTaken
        - AlliedTop(Mid)(Bot)TurretsTaken
        - EnemyInhibsTaken
        - AlliedInhibsTaken
        - EnemyNexusTurretsTaken
        - AlliedNexusTurretsTaken
        - Atakhan (1 if captured, -1 if enemy captured, 0 otherwise)
        - HasSoul
        - HasShelly
        - HasBaron
        - HasElder
        - ?? Relating to which objectives are up (BaronUp, DrakeUp)
            This could be important if one team has way more vision around obj

        - Time
        - Rank#
        - Patch#
       


2. Create a user interface that allows a user to filter through different game states, calculating the win probability added for each objective on request. 
